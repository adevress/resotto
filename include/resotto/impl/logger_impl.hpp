/**
 * Copyright (c) 2018, Adrien Devresse <adev@adev.name>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef RESOTTO_LOGGER_IMPL_HPP
#define RESOTTO_LOGGER_IMPL_HPP

#include <array>
#include <bitset>
#include <mutex>

#include <hadoken/utility/singleton.hpp>

#include "../logger.hpp"

namespace resotto {

namespace impl {

const std::array<string_view, 5> _log_level_str = { "ERROR", "WARNING", "INFO", "DEBUG", "TRACE" };


struct logger_handler {
    log_level level = log_level::trace;
    log_scope::set scope = 0xff;
};


//
// Meyer's singleton for the logger
//
inline logger_handler & get_logger(){
    hadoken::singleton<logger_handler> state;
    return state.instance();
}

} // impl


inline string_view to_string_view(log_level l){
    return impl::_log_level_str.at(int(l));
}



inline void set_log_level(log_level level){
    impl::get_logger().level = level;
}

inline void set_log_scope(log_scope::set sc){
    impl::get_logger().scope = sc;
}

template<typename... Args>
void logger(log_level level, log_scope::value scope, Args... args){

    static std::mutex log_mut;
    auto & log = impl::get_logger();

    if(log.level >= level && log.scope[int(scope)]){
        std::lock_guard<std::mutex> lock(log_mut);

        std::cout << "[" << to_string_view(log.level) << "] " << hadoken::scat(args...) << "\n";
    }
}

} // resotto



#endif // RESOTTO_LOGGER_IMPL_HPP
