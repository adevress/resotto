/**
 * Copyright (c) 2018, Adrien Devresse <adev@adev.name>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef RESOTTO_HTTP_REPLY_IMPL_HPP
#define RESOTTO_HTTP_REPLY_IMPL_HPP


#include "../http_reply.hpp"
#include "../logger.hpp"

namespace resotto{


namespace server{

namespace http{


inline reply::reply() : _code(500){}

inline reply::~reply(){}


inline void reply::set_code(int code){
    _code = code;
}

inline void reply::set_body(std::string content){
    _body = std::move(content);
}


template<typename Stream>
void serialize_reply(Stream & s, reply & rep){

    string_view content(boost::get<std::string>(rep._body)), headers;

    constexpr int buffer_size = 4096;
    char buf [buffer_size];
    snprintf(buf, buffer_size,

             "HTTP/1.1 %d code" "\r\n"
             "Content-Length: %lu" "\r\n"
             "Connection: keep-alive" "\r\n"
             "\r\n"

             , rep._code
             , content.size()
              );


    headers = string_view(buf);

    logger(log_level::debug, log_scope::reply, headers);

    logger(log_level::debug, log_scope::reply, "header size ", headers.size());
    s.send(
                  network::buffer(headers.data(), headers.size())

                );

    logger(log_level::debug, log_scope::reply, "content size ", content.size());
    s.send(
                  network::buffer(content.data(), content.size())
                );
}

} // http

} // server

} // resotto

#endif // RESOTTO_HTTP_REPLY_IMPL_HPP
