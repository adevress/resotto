/**
 * Copyright (c) 2018, Adrien Devresse <adev@adev.name>
 *
 * Boost Software License - Version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
*
*/
#ifndef RESOTTO_HTTP_REPLY_HPP
#define RESOTTO_HTTP_REPLY_HPP

#include <hadoken/utility/variant.hpp>

#include "resotto_types.hpp"

namespace resotto{

namespace server{

template<typename Socket>
class session_handler;

namespace http{


class reply{
public:

    virtual ~reply();

    void set_code(int code);

    void set_body(std::string content);

private:
    reply();
    reply(const reply &) = delete;

    int _code;
    hadoken::variant<std::string> _body;


    template<typename Socket>
    friend class ::resotto::server::session_handler;
    template<typename Stream>
    friend void serialize_reply(Stream &, reply & rep);


};



template<typename Stream>
void serialize_reply(Stream &, reply & rep);

} // http

} // server

} // resotto


#include "impl/http_reply_impl.hpp"

#endif // HTTP_REPLY_HPP
